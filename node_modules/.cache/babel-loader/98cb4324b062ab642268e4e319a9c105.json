{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nimport Films from '@/components/Films.vue';\nimport NavesList from '@/components/NavesList.vue';\n// import NaveFile from '@/components/NaveFile.vue'\n\nexport default {\n  __name: 'PersonView',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n\n    // @ is an alias to /src\n    const route = useRoute();\n    const router = useRouter();\n    const store = useStore();\n    if (store.getters.countPeople == 0) {\n      router.push({\n        name: 'people'\n      }); //si accede directo o reload, redirect a listado (porque no tenemos propiedad id para hacer fetch a url específica de nave)\n    }\n\n    let isShipLoaded = ref(false);\n    const name = ref(route.params.name);\n    const dataObj = store.state.people.find(item => item.name == name.value);\n    const objEntries = ref([]);\n    Object.entries(dataObj).forEach(item => {\n      if (item[0] != 'species' && item[0] != 'starships' && item[0] != 'films' && item[0] != 'homeworld' && item[0] != 'vehicles' && item[0] != 'created' && item[0] != 'edited' && item[0] != 'url') {\n        let name = item[0].charAt(0).toUpperCase() + item[0].slice(1).replaceAll(\"_\", \" \");\n        objEntries.value.push([name, item[1]]);\n      }\n    });\n    const films = dataObj.films;\n    const navesUrls = dataObj.starships;\n    const navesData = ref([]);\n    navesUrls.forEach(url => {\n      if (store.getters.countShips > 0) {\n        if (store.state.ships.some(item => item.url == url)) {\n          let naveFound = store.state.ships.find(item => item.url == url);\n          navesData.value.push({\n            name: naveFound.name,\n            model: naveFound.model\n          });\n          isShipLoaded.value = true;\n        }\n      } else {\n        const request = fetch(url);\n        request.then(response => {\n          if (!response.ok) {\n            throw response.status;\n          } else {\n            return response.json();\n          }\n        }).then(json => {\n          navesData.value.push({\n            name: json.name,\n            model: json.model\n          });\n        }).catch(error => {\n          console.log('Ocurrió un error: ', error);\n        });\n      }\n    });\n    const __returned__ = {\n      route,\n      router,\n      store,\n      isShipLoaded,\n      name,\n      dataObj,\n      objEntries,\n      films,\n      navesUrls,\n      navesData,\n      ref,\n      useRoute,\n      useRouter,\n      useStore,\n      Films,\n      NavesList\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":";AAEA,SAASA,GAAG,QAAQ,KAAK;AACzB,SAASC,QAAQ,EAACC,SAAS,QAAQ,YAAY;AAC/C,SAASC,QAAQ,QAAQ,MAAM;AAC/B,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,SAAS,MAAM,4BAA4B;AAClD;;;;;;;;;IANA;IAQA,MAAMC,KAAK,GAAGL,QAAQ,EAAE;IACxB,MAAMM,MAAM,GAACL,SAAS,EAAE;IACxB,MAAMM,KAAK,GAAGL,QAAQ,EAAE;IAExB,IAAIK,KAAK,CAACC,OAAO,CAACC,WAAW,IAAE,CAAC,EAAC;MAC/BH,MAAM,CAACI,IAAI,CAAC;QAACC,IAAI,EAAC;MAAQ,CAAC,CAAC,CAAC;IAC/B;;IAEA,IAAIC,YAAY,GAACb,GAAG,CAAC,KAAK,CAAC;IAE3B,MAAMY,IAAI,GAACZ,GAAG,CAACM,KAAK,CAACQ,MAAM,CAACF,IAAI,CAAC;IACjC,MAAMG,OAAO,GAACP,KAAK,CAACQ,KAAK,CAACC,MAAM,CAACC,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACP,IAAI,IAAEA,IAAI,CAACQ,KAAK,CAAC;IAClE,MAAMC,UAAU,GAACrB,GAAG,CAAC,EAAE,CAAC;IAExBsB,MAAM,CAACC,OAAO,CAACR,OAAO,CAAC,CAACS,OAAO,CAAEL,IAAI,IAAG;MACtC,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAE,SAAS,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAE,WAAW,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAE,OAAO,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAE,WAAW,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAE,UAAU,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAE,SAAS,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAE,QAAQ,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAE,KAAK,EAAC;QAC/K,IAAIP,IAAI,GAACO,IAAI,CAAC,CAAC,CAAC,CAACM,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGP,IAAI,CAAC,CAAC,CAAC,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC;QAChFP,UAAU,CAACD,KAAK,CAACT,IAAI,CAAC,CAACC,IAAI,EAAEO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MACtC;IACF,CAAC,CAAC;IAEF,MAAMU,KAAK,GAACd,OAAO,CAACc,KAAK;IAEzB,MAAMC,SAAS,GAACf,OAAO,CAACgB,SAAS;IACjC,MAAMC,SAAS,GAAChC,GAAG,CAAC,EAAE,CAAC;IAEvB8B,SAAS,CAACN,OAAO,CAAES,GAAG,IAAG;MACvB,IAAIzB,KAAK,CAACC,OAAO,CAACyB,UAAU,GAAC,CAAC,EAAC;QAC7B,IAAI1B,KAAK,CAACQ,KAAK,CAACmB,KAAK,CAACC,IAAI,CAACjB,IAAI,IAAEA,IAAI,CAACc,GAAG,IAAEA,GAAG,CAAC,EAAC;UAC9C,IAAII,SAAS,GAAC7B,KAAK,CAACQ,KAAK,CAACmB,KAAK,CAACjB,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACc,GAAG,IAAEA,GAAG,CAAC;UACzDD,SAAS,CAACZ,KAAK,CAACT,IAAI,CAAC;YAACC,IAAI,EAAEyB,SAAS,CAACzB,IAAI;YAAE0B,KAAK,EAACD,SAAS,CAACC;UAAK,CAAC,CAAC;UACnEzB,YAAY,CAACO,KAAK,GAAC,IAAI;QACzB;MACF,CAAC,MAAK;QACJ,MAAMmB,OAAO,GAAGC,KAAK,CAACP,GAAG,CAAC;QAC1BM,OAAO,CAACE,IAAI,CAAEC,QAAQ,IAAI;UAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;YAChB,MAAMD,QAAQ,CAACE,MAAM;UAEvB,CAAC,MAAK;YACJ,OAAOF,QAAQ,CAACG,IAAI,EAAE;UACxB;QACA,CAAC,CAAC,CACHJ,IAAI,CAACI,IAAI,IAAI;UACZb,SAAS,CAACZ,KAAK,CAACT,IAAI,CAAC;YAACC,IAAI,EAAEiC,IAAI,CAACjC,IAAI;YAAE0B,KAAK,EAACO,IAAI,CAACP;UAAK,CAAC,CAAC;QAC3D,CAAC,CAAC,CACDQ,KAAK,CAAEC,KAAK,IAAK;UAChBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,KAAK,CAAC;QAC1C,CAAC,CAAC;MACZ;IAEF,CAAC,CAAC","names":["ref","useRoute","useRouter","useStore","Films","NavesList","route","router","store","getters","countPeople","push","name","isShipLoaded","params","dataObj","state","people","find","item","value","objEntries","Object","entries","forEach","charAt","toUpperCase","slice","replaceAll","films","navesUrls","starships","navesData","url","countShips","ships","some","naveFound","model","request","fetch","then","response","ok","status","json","catch","error","console","log"],"sources":["C:/Users/User01/Documents/ITAcademy/Vue/sprint8/starwars/src/views/PersonView.vue"],"sourcesContent":["<script setup>\n// @ is an alias to /src\nimport { ref } from 'vue'\nimport { useRoute,useRouter } from 'vue-router'\nimport { useStore } from 'vuex'\nimport Films from '@/components/Films.vue'\nimport NavesList from '@/components/NavesList.vue'\n// import NaveFile from '@/components/NaveFile.vue'\n\nconst route = useRoute()\nconst router=useRouter()\nconst store = useStore()\n\nif (store.getters.countPeople==0){\n  router.push({name:'people'});//si accede directo o reload, redirect a listado (porque no tenemos propiedad id para hacer fetch a url específica de nave)\n}\n\nlet isShipLoaded=ref(false);\n\nconst name=ref(route.params.name);\nconst dataObj=store.state.people.find(item=>item.name==name.value)\nconst objEntries=ref([]);\n\nObject.entries(dataObj).forEach((item)=>{\n  if (item[0]!='species' && item[0]!='starships' && item[0]!='films' && item[0]!='homeworld' && item[0]!='vehicles' && item[0]!='created' && item[0]!='edited' && item[0]!='url'){\n  let name=item[0].charAt(0).toUpperCase() + item[0].slice(1).replaceAll(\"_\", \" \");\n  objEntries.value.push([name, item[1]]);\n  }\n})\n\nconst films=dataObj.films;\n\nconst navesUrls=dataObj.starships;\nconst navesData=ref([]);\n\nnavesUrls.forEach (url=> {\n  if (store.getters.countShips>0){\n    if (store.state.ships.some(item=>item.url==url)){\n      let naveFound=store.state.ships.find(item=>item.url==url);\n      navesData.value.push({name: naveFound.name, model:naveFound.model});\n      isShipLoaded.value=true;\n    }\n  } else{\n    const request = fetch(url);\n    request.then( response => {\n              if (!response.ok) {\n                throw response.status\n             \n              } else{\n                return response.json()\n              }\n              })\n            .then(json => {\n              navesData.value.push({name: json.name, model:json.model});\n            })\n            .catch((error) => {\n              console.log('Ocurrió un error: ', error)\n            });\n  }\n  \n})\n\n</script>\n<template>\n  <!-- \"name\": \"CR90 corvette\", \n    \"model\": \"CR90 corvette\", \n    \"manufacturer\": \"Corellian Engineering Corporation\", \n    \"cost_in_credits\": \"3500000\", \n    \"length\": \"150\", \n    \"max_atmosphering_speed\": \"950\", \n    \"crew\": \"30-165\", \n    \"passengers\": \"600\", \n    \"cargo_capacity\": \"3000000\", \n    \"consumables\": \"1 year\", \n    \"hyperdrive_rating\": \"2.0\", \n    \"MGLT\": \"60\",  -->\n  <div class=\"home\" v-if=\"store.getters.countPeople>0\">\n    <p>{{ name }}</p>\n\n  </div>\n  <div v-for=\"(entry, index) in objEntries\" :key=\"index\">\n    <div v-if=\"entry[0]!='pilots' && entry[0]!='films' && entry[0]!='created' && entry[0]!='edited' && entry[0]!='url'\">\n      {{entry[0]}}: {{entry[1]}}\n    </div>\n  </div>\n  <div v-if=\"films.length>0\">\n    <h3>Films</h3>\n    <Films v-for=\"(url, index) in films\" :key=\"index\" :url=\"url\" />\n  </div>\n  <div v-if=\"navesUrls.length>0\">\n    <h3>Naves</h3>\n    <div v-if=\"isPersonLoaded\">\n      <NavesList v-for=\"(item, index) in navesData\" :key=\"index\" :name=\"item.name\" :model=\"item.model\" />\n    </div>\n    <div v-else>\n      <ul>\n        <li v-for=\"(item, index) in navesData\" :key=\"index\">{{item.name}} - {{item.model}}</li>\n      </ul>\n    </div>\n  </div>\n  \n</template>\n\n\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}